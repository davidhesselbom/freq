!c++11 {
    error("Use \"CONFIG += c++11 buildflags\" instead of \"CONFIG += buildflags\"")
}

message("buildflags for $$_PRO_FILE_PWD_ with $$QMAKESPEC")

CONFIG += legacy-opengl
win32-msvc*:CONFIG += debug_and_release
CONFIG += warn_on
CONFIG(debug, debug|release): DEFINES += _DEBUG
CONFIG(debug, debug|release): DEFINES += SHARED_STATE_NO_TIMEOUT # don't timeout locks when stepping in a debugger
CONFIG(release, debug|release): DEFINES += SHARED_STATE_NO_TIMEOUT # use simple locks in release

usecuda {
    DEFINES += SAWE_NO_MUTEX
    DEFINES += THREADCHECKER_NO_CHECK
}

macx* {
    # Apply warn_on before disabling specific warnings
    warn_on {
        QMAKE_CXXFLAGS += $$QMAKE_CFLAGS_WARN_ON
        CONFIG -= warn_on
    }

    QMAKE_CXXFLAGS += -Wpedantic
    QMAKE_CXXFLAGS += -Wno-c++1y-extensions
    QMAKE_CXXFLAGS += -Wno-unused-parameter
    QMAKE_CXXFLAGS -= -Wunknown-pragmas
    QMAKE_CXXFLAGS += -Wno-unknown-pragmas
    QMAKE_CXXFLAGS += -Wno-unused-local-typedef
}

macx {
    macosx105 {
        QMAKE_LFLAGS += -isysroot /Developer/SDKs/MacOSX10.5.sdk
        QMAKE_CXXFLAGS += -isysroot /Developer/SDKs/MacOSX10.5.sdk
        QMAKE_CFLAGS += -isysroot /Developer/SDKs/MacOSX10.5.sdk
    }
    macosx32bit {
        QMAKE_LFLAGS += -m32 -arch i386
        QMAKE_CXXFLAGS += -m32 -arch i386
        QMAKE_CFLAGS += -m32 -arch i386
    }
    #QMAKE_CXXFLAGS += -Wfatal-errors
    #QMAKE_CFLAGS += -Wfatal-errors
    #DEFINES += MAC_OS_X_VERSION_MAX_ALLOWED=1070

    CCNAME = $$system(basename $$QMAKE_CC)
    equals(CCNAME, clang) {
        QMAKE_CXXFLAGS += -Wno-tautological-constant-out-of-range-compare
    }

    # Use default sysroot for g++-mp-4.9 et. al.
    # reverses flags from mkspecs/features/mac/sdk.prf
    !equals(CCNAME, clang) {
        QMAKE_CFLAGS -= -isysroot $$QMAKE_MAC_SDK_PATH
        QMAKE_CXXFLAGS -= -isysroot $$QMAKE_MAC_SDK_PATH
        QMAKE_OBJECTIVE_CFLAGS -= -isysroot $$QMAKE_MAC_SDK_PATH
        QMAKE_LFLAGS -= -Wl,-syslibroot,$$QMAKE_MAC_SDK_PATH
    }

#    CONFIG(debug, debug|release) {
#        QMAKE_CXXFLAGS -= -gdwarf-2
#        QMAKE_CXXFLAGS += -gdwarf-4
#    }

    equals(CCNAME, clang) {
        # C++11 doesn't work for 10.7 in Xcode 6.3 (OS X 10.10), but it does work for 10.7 with older versions of Xcode.
        QMAKE_MACOSX_DEPLOYMENT_TARGET = 10.9

        QMAKE_CFLAGS -= -isysroot $$QMAKE_MAC_SDK_PATH
        QMAKE_CXXFLAGS -= -isysroot $$QMAKE_MAC_SDK_PATH
        QMAKE_OBJECTIVE_CFLAGS -= -isysroot $$QMAKE_MAC_SDK_PATH
        QMAKE_LFLAGS -= -Wl,-syslibroot,$$QMAKE_MAC_SDK_PATH

        QMAKE_CFLAGS -= -mmacosx-version-min=10.7
        QMAKE_CXXFLAGS -= -mmacosx-version-min=10.7
        QMAKE_OBJECTIVE_CFLAGS -= -mmacosx-version-min=10.7
        QMAKE_LFLAGS -= -mmacosx-version-min=10.7

        QMAKE_CFLAGS += -mmacosx-version-min=10.9
        QMAKE_CXXFLAGS += -mmacosx-version-min=10.9
        QMAKE_OBJECTIVE_CFLAGS += -mmacosx-version-min=10.9
        QMAKE_LFLAGS += -mmacosx-version-min=10.9
    }
}

win32-msvc* {
    DEFINES += _SCL_SECURE_NO_WARNINGS _CRT_SECURE_NO_WARNINGS

    CONFIG(debug, debug|release) {
        QMAKE_CXXFLAGS += /Od /RTCc /RTC1 /Gy /Gm /GS /ZI
        QMAKE_LFLAGS += /INCREMENTAL
    } else {
# Enable Fiber-Safe Optimizaions /GT
# Calling Convention __fastcall /Gr
# /Og enables global optimization
# /Oy enables frame pointer omission
# /Ob1 enables inlining of functions explicitly declared inline
# /Ob2 makes it possible for any function to be inline
# The /Gf switch enables string pooling, a size optimization that lets the compiler place a single copy of identical strings into the .exe file. # The /GF switch works likes /Gf but puts common strings in read-only memory
# The /Gy switch makes it possible for the compiler to make all individual functions packaged functions (COMDATs). This means the linker can exclude or order individual functions in a DLL or .exe file, which in turn reduces the run-time size of the program
# /Oi, which makes it possible for the compiler to expand intrinsic functions inline
# /Os favors smaller code size over speed
# /Ot, which favors faster code over smaller code
# /GL Whole Program Optimizaion: Enable link-time code generation
# /DEBUG Generate debug info, needed for stack back traces
        QMAKE_CXXFLAGS += /Ox /Oi /Og /Ot /Ob2 /GL /GF /arch:SSE2 /fp:fast /MP
        QMAKE_LFLAGS += /LTCG /DEBUG
    }

    #QMAKE_LFLAGS_DEBUG += \
    #    /NODEFAULTLIB:LIBCPMT \ # LIBCPMT is linked by boost_serialization but we don't want it to, this row is required to link successfully
    #    /NODEFAULTLIB:LIBCMT \ # some other lib links LIBCMT and MSVCRT too, but LINK.EXE ignores them even without explicit NODEFAULTLIB
    #    /NODEFAULTLIB:MSVCRT \
    #
    #QMAKE_LFLAGS_RELEASE += \
    #    /NODEFAULTLIB:LIBCPMT \ # LIBCPMT is linked by boost_serialization but we don't want it to, this row is required to link successfully
    #    /NODEFAULTLIB:LIBCMT \ # some other lib links LIBCMT too, but LINK.EXE ignores it even without explicit NODEFAULTLIB
    #
}

unix {
    !macx* {
        CONFIG(debug, debug|release):QMAKE_CXXFLAGS_DEBUG += -ggdb
        QMAKE_CXXFLAGS += -Wno-unused-local-typedefs
    }

    CONFIG(release, debug|release) {
        QMAKE_CXXFLAGS -= -O2
        QMAKE_CXXFLAGS += -O3
        QMAKE_CFLAGS -= -O2
        QMAKE_CFLAGS += -O3

        # backtrace(3)
        QMAKE_LFLAGS += -rdynamic
        QMAKE_CXXFLAGS += -fno-omit-frame-pointer
        QMAKE_CFLAGS += -fno-omit-frame-pointer

        # Debug symbols makes stack traces easier to read (even though not
        # exact which line nor even which file is guaranteed). Anyway it
        # doesn't seem to slow down exectuion speed.
        QMAKE_CFLAGS += -g
        QMAKE_CXXFLAGS += -g
    }
}

profiling {
    # Profiling with gcc, gprof doesn't work with Os X 10.5 Leopard.
    !win32:QMAKE_CXXFLAGS_RELEASE += -pg
    !win32:QMAKE_LFLAGS_RELEASE += -pg
}

ios: INCLUDEPATH += $$_PRO_FILE_PWD_/../../3rdparty/ios/include
win32: INCLUDEPATH += $$_PRO_FILE_PWD_/../../3rdparty/windows

