win32:CONFIG += debug_and_release
macx:CONFIG -= app_bundle
CONFIG += warn_on

usecuda {
    DEFINES += SAWE_NO_MUTEX
    DEFINES += THREADCHECKER_NO_CHECK
}

macx {
    macosx105 {
        QMAKE_LFLAGS += -isysroot /Developer/SDKs/MacOSX10.5.sdk
        QMAKE_CXXFLAGS += -isysroot /Developer/SDKs/MacOSX10.5.sdk
        QMAKE_CFLAGS += -isysroot /Developer/SDKs/MacOSX10.5.sdk
    }
    macosx32bit {
        QMAKE_LFLAGS += -m32 -arch i386
        QMAKE_CXXFLAGS += -m32 -arch i386
        QMAKE_CFLAGS += -m32 -arch i386
    }
    QMAKE_CXXFLAGS += -Wfatal-errors
    QMAKE_CFLAGS += -Wfatal-errors
    DEFINES += MAC_OS_X_VERSION_MAX_ALLOWED=1070
}

win32 {
    DEFINES += _SCL_SECURE_NO_WARNINGS _CRT_SECURE_NO_WARNINGS

    CONFIG(debug, debug|release) {
        QMAKE_CXXFLAGS += /Od /RTCc /RTC1 /Gy /Gm /GS /ZI
        QMAKE_LFLAGS += /INCREMENTAL
    } else {
# Enable Fiber-Safe Optimizaions /GT
# Calling Convention __fastcall /Gr
# /Og enables global optimization
# /Oy enables frame pointer omission
# /Ob1 enables inlining of functions explicitly declared inline
# /Ob2 makes it possible for any function to be inline
# The /Gf switch enables string pooling, a size optimization that lets the compiler place a single copy of identical strings into the .exe file. # The /GF switch works likes /Gf but puts common strings in read-only memory
# The /Gy switch makes it possible for the compiler to make all individual functions packaged functions (COMDATs). This means the linker can exclude or order individual functions in a DLL or .exe file, which in turn reduces the run-time size of the program
# /Oi, which makes it possible for the compiler to expand intrinsic functions inline
# /Os favors smaller code size over speed
# /Ot, which favors faster code over smaller code
# /GL Whole Program Optimizaion: Enable link-time code generation
# /DEBUG Generate debug info, needed for stack back traces
        QMAKE_CXXFLAGS += /Ox /Oi /Og /Ot /Ob2 /GL /GF /arch:SSE2 /fp:fast /MP
        QMAKE_LFLAGS += /LTCG /DEBUG
    }

    #QMAKE_LFLAGS_DEBUG += \
    #    /NODEFAULTLIB:LIBCPMT \ # LIBCPMT is linked by boost_serialization but we don't want it to, this row is required to link successfully
    #    /NODEFAULTLIB:LIBCMT \ # some other lib links LIBCMT and MSVCRT too, but LINK.EXE ignores them even without explicit NODEFAULTLIB
    #    /NODEFAULTLIB:MSVCRT \
    #
    #QMAKE_LFLAGS_RELEASE += \
    #    /NODEFAULTLIB:LIBCPMT \ # LIBCPMT is linked by boost_serialization but we don't want it to, this row is required to link successfully
    #    /NODEFAULTLIB:LIBCMT \ # some other lib links LIBCMT too, but LINK.EXE ignores it even without explicit NODEFAULTLIB
    #
}

unix {
    !macx {
        CONFIG(debug, debug|release):QMAKE_CXXFLAGS_DEBUG += -ggdb
        QMAKE_CXX = colorgcc
    }

    CONFIG(release, debug|release) {
        QMAKE_CXXFLAGS -= -O2
        QMAKE_CXXFLAGS += -O3
        QMAKE_CFLAGS -= -O2
        QMAKE_CFLAGS += -O3

        # backtrace(3)
        QMAKE_LFLAGS += -rdynamic
        QMAKE_CXXFLAGS += -fno-omit-frame-pointer
        QMAKE_CFLAGS += -fno-omit-frame-pointer
    }
}

profiling {
    # Profiling with gcc, gprof doesn't work with Os X 10.5 Leopard.
    !win32:QMAKE_CXXFLAGS_RELEASE += -pg
    !win32:QMAKE_LFLAGS_RELEASE += -pg
}


# Use macports gcc 4.7 if available, necessary to build for openmp on Mac
system(which /opt/local/bin/g++-mp-4.7 > /dev/null): CONFIG += gcc-mp-4.7
gcc-mp-4.7 {
        # -rdynamic is the preferred way for enabling backtrace, but doesn't work with gcc-mp-4.7
    QMAKE_LFLAGS -= -rdynamic

    QMAKE_CXX = /opt/local/bin/g++-mp-4.7
    QMAKE_CC = /opt/local/bin/gcc-mp-4.7
    QMAKE_LINK = /opt/local/bin/g++-mp-4.7
}

### Settings for using llvm instead of gcc on linux
llvm {
    QMAKE_CXX = llvm-g++
    QMAKE_CC = llvm-gcc
    QMAKE_LINK = llvm-g++
}

clang {
    QMAKE_CXX = clang++
    QMAKE_CC = clang
    QMAKE_LINK = clang++
}

gcc-4.3 {
    QMAKE_CXX = g++-4.3
    QMAKE_CC = gcc-4.3
    QMAKE_LINK = g++-4.3
}


#gold-linker {
#    QMAKE_LINK = gold
#    QMAKE_LINK = ld
# TODO add system libraries which are included by g++-4.3, but not by 'gold' (nor 'ld'), could use output from compiling with "g++-4.3 -v"
#    QMAKE_LFLAGS += -L/usr/lib -L/usr/X11R6/lib -shared-libgcc -mtune=generic /usr/lib/gcc/x86_64-linux-gnu/4.3.4/collect2 --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=both -dynamic-linker /lib64/ld-linux-x86-64.so.2 -o sonicawe -z relro /usr/lib/gcc/x86_64-linux-gnu/4.3.4/../../../../lib/crt1.o /usr/lib/gcc/x86_64-linux-gnu/4.3.4/../../../../lib/crti.o /usr/lib/gcc/x86_64-linux-gnu/4.3.4/crtbegin.o -L/usr/local/cuda/lib64 -L/usr/lib -L/usr/X11R6/lib -L../lib/gpumisc -L/usr/lib/gcc/x86_64-linux-gnu/4.3.4 -L/usr/lib/gcc/x86_64-linux-gnu/4.3.4 -L/usr/lib/gcc/x86_64-linux-gnu/4.3.4/../../../../lib -L/lib/../lib -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/4.3.4/../../.. -L/usr/lib/x86_64-linux-gnu
#}
